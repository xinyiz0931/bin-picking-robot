# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import phoxi_pb2 as phoxi__pb2


class PhoxiStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.triggerframe = channel.unary_unary(
                '/Phoxi/triggerframe',
                request_serializer=phoxi__pb2.Empty.SerializeToString,
                response_deserializer=phoxi__pb2.Empty.FromString,
                )
        self.gettextureimg = channel.unary_unary(
                '/Phoxi/gettextureimg',
                request_serializer=phoxi__pb2.Empty.SerializeToString,
                response_deserializer=phoxi__pb2.CamImg.FromString,
                )
        self.getdepthimg = channel.unary_unary(
                '/Phoxi/getdepthimg',
                request_serializer=phoxi__pb2.Empty.SerializeToString,
                response_deserializer=phoxi__pb2.CamImg.FromString,
                )
        self.getpcd = channel.unary_unary(
                '/Phoxi/getpcd',
                request_serializer=phoxi__pb2.Empty.SerializeToString,
                response_deserializer=phoxi__pb2.PointCloud.FromString,
                )
        self.getnormals = channel.unary_unary(
                '/Phoxi/getnormals',
                request_serializer=phoxi__pb2.Empty.SerializeToString,
                response_deserializer=phoxi__pb2.PointCloud.FromString,
                )
        self.saveplyauto = channel.unary_unary(
                '/Phoxi/saveplyauto',
                request_serializer=phoxi__pb2.Empty.SerializeToString,
                response_deserializer=phoxi__pb2.Empty.FromString,
                )
        self.saveply = channel.unary_unary(
                '/Phoxi/saveply',
                request_serializer=phoxi__pb2.SaveDir.SerializeToString,
                response_deserializer=phoxi__pb2.Empty.FromString,
                )


class PhoxiServicer(object):
    """Missing associated documentation comment in .proto file."""

    def triggerframe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def gettextureimg(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getdepthimg(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getpcd(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getnormals(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def saveplyauto(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def saveply(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PhoxiServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'triggerframe': grpc.unary_unary_rpc_method_handler(
                    servicer.triggerframe,
                    request_deserializer=phoxi__pb2.Empty.FromString,
                    response_serializer=phoxi__pb2.Empty.SerializeToString,
            ),
            'gettextureimg': grpc.unary_unary_rpc_method_handler(
                    servicer.gettextureimg,
                    request_deserializer=phoxi__pb2.Empty.FromString,
                    response_serializer=phoxi__pb2.CamImg.SerializeToString,
            ),
            'getdepthimg': grpc.unary_unary_rpc_method_handler(
                    servicer.getdepthimg,
                    request_deserializer=phoxi__pb2.Empty.FromString,
                    response_serializer=phoxi__pb2.CamImg.SerializeToString,
            ),
            'getpcd': grpc.unary_unary_rpc_method_handler(
                    servicer.getpcd,
                    request_deserializer=phoxi__pb2.Empty.FromString,
                    response_serializer=phoxi__pb2.PointCloud.SerializeToString,
            ),
            'getnormals': grpc.unary_unary_rpc_method_handler(
                    servicer.getnormals,
                    request_deserializer=phoxi__pb2.Empty.FromString,
                    response_serializer=phoxi__pb2.PointCloud.SerializeToString,
            ),
            'saveplyauto': grpc.unary_unary_rpc_method_handler(
                    servicer.saveplyauto,
                    request_deserializer=phoxi__pb2.Empty.FromString,
                    response_serializer=phoxi__pb2.Empty.SerializeToString,
            ),
            'saveply': grpc.unary_unary_rpc_method_handler(
                    servicer.saveply,
                    request_deserializer=phoxi__pb2.SaveDir.FromString,
                    response_serializer=phoxi__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Phoxi', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Phoxi(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def triggerframe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Phoxi/triggerframe',
            phoxi__pb2.Empty.SerializeToString,
            phoxi__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def gettextureimg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Phoxi/gettextureimg',
            phoxi__pb2.Empty.SerializeToString,
            phoxi__pb2.CamImg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getdepthimg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Phoxi/getdepthimg',
            phoxi__pb2.Empty.SerializeToString,
            phoxi__pb2.CamImg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getpcd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Phoxi/getpcd',
            phoxi__pb2.Empty.SerializeToString,
            phoxi__pb2.PointCloud.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getnormals(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Phoxi/getnormals',
            phoxi__pb2.Empty.SerializeToString,
            phoxi__pb2.PointCloud.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def saveplyauto(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Phoxi/saveplyauto',
            phoxi__pb2.Empty.SerializeToString,
            phoxi__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def saveply(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Phoxi/saveply',
            phoxi__pb2.SaveDir.SerializeToString,
            phoxi__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
