# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import nxtrobot_pb2 as nxtrobot__pb2


class NxtStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.checkEncoders = channel.unary_unary(
                '/Nxt/checkEncoders',
                request_serializer=nxtrobot__pb2.Empty.SerializeToString,
                response_deserializer=nxtrobot__pb2.Status.FromString,
                )
        self.servoOn = channel.unary_unary(
                '/Nxt/servoOn',
                request_serializer=nxtrobot__pb2.Empty.SerializeToString,
                response_deserializer=nxtrobot__pb2.Status.FromString,
                )
        self.servoOff = channel.unary_unary(
                '/Nxt/servoOff',
                request_serializer=nxtrobot__pb2.Empty.SerializeToString,
                response_deserializer=nxtrobot__pb2.Status.FromString,
                )
        self.goInitial = channel.unary_unary(
                '/Nxt/goInitial',
                request_serializer=nxtrobot__pb2.Empty.SerializeToString,
                response_deserializer=nxtrobot__pb2.Status.FromString,
                )
        self.goOffPose = channel.unary_unary(
                '/Nxt/goOffPose',
                request_serializer=nxtrobot__pb2.Empty.SerializeToString,
                response_deserializer=nxtrobot__pb2.Status.FromString,
                )
        self.getJointAngles = channel.unary_unary(
                '/Nxt/getJointAngles',
                request_serializer=nxtrobot__pb2.Empty.SerializeToString,
                response_deserializer=nxtrobot__pb2.ReturnValue.FromString,
                )
        self.setJointAngles = channel.unary_unary(
                '/Nxt/setJointAngles',
                request_serializer=nxtrobot__pb2.SendValue.SerializeToString,
                response_deserializer=nxtrobot__pb2.Status.FromString,
                )
        self.playPattern = channel.unary_unary(
                '/Nxt/playPattern',
                request_serializer=nxtrobot__pb2.SendValue.SerializeToString,
                response_deserializer=nxtrobot__pb2.Status.FromString,
                )
        self.closeHandToolLft = channel.unary_unary(
                '/Nxt/closeHandToolLft',
                request_serializer=nxtrobot__pb2.Empty.SerializeToString,
                response_deserializer=nxtrobot__pb2.Status.FromString,
                )
        self.closeHandToolRgt = channel.unary_unary(
                '/Nxt/closeHandToolRgt',
                request_serializer=nxtrobot__pb2.Empty.SerializeToString,
                response_deserializer=nxtrobot__pb2.Status.FromString,
                )
        self.openHandToolLft = channel.unary_unary(
                '/Nxt/openHandToolLft',
                request_serializer=nxtrobot__pb2.Empty.SerializeToString,
                response_deserializer=nxtrobot__pb2.Status.FromString,
                )
        self.openHandToolRgt = channel.unary_unary(
                '/Nxt/openHandToolRgt',
                request_serializer=nxtrobot__pb2.Empty.SerializeToString,
                response_deserializer=nxtrobot__pb2.Status.FromString,
                )
        self.ejectHandToolLft = channel.unary_unary(
                '/Nxt/ejectHandToolLft',
                request_serializer=nxtrobot__pb2.Empty.SerializeToString,
                response_deserializer=nxtrobot__pb2.Status.FromString,
                )
        self.ejectHandToolRgt = channel.unary_unary(
                '/Nxt/ejectHandToolRgt',
                request_serializer=nxtrobot__pb2.Empty.SerializeToString,
                response_deserializer=nxtrobot__pb2.Status.FromString,
                )
        self.attachHandToolLft = channel.unary_unary(
                '/Nxt/attachHandToolLft',
                request_serializer=nxtrobot__pb2.Empty.SerializeToString,
                response_deserializer=nxtrobot__pb2.Status.FromString,
                )
        self.attachHandToolRgt = channel.unary_unary(
                '/Nxt/attachHandToolRgt',
                request_serializer=nxtrobot__pb2.Empty.SerializeToString,
                response_deserializer=nxtrobot__pb2.Status.FromString,
                )
        self.setHandAnglesDegRgt = channel.unary_unary(
                '/Nxt/setHandAnglesDegRgt',
                request_serializer=nxtrobot__pb2.SendValue.SerializeToString,
                response_deserializer=nxtrobot__pb2.Status.FromString,
                )
        self.setHandAnglesDegLft = channel.unary_unary(
                '/Nxt/setHandAnglesDegLft',
                request_serializer=nxtrobot__pb2.SendValue.SerializeToString,
                response_deserializer=nxtrobot__pb2.Status.FromString,
                )
        self.moveArmRelRgt = channel.unary_unary(
                '/Nxt/moveArmRelRgt',
                request_serializer=nxtrobot__pb2.SendValue.SerializeToString,
                response_deserializer=nxtrobot__pb2.Status.FromString,
                )
        self.moveArmRelLft = channel.unary_unary(
                '/Nxt/moveArmRelLft',
                request_serializer=nxtrobot__pb2.SendValue.SerializeToString,
                response_deserializer=nxtrobot__pb2.Status.FromString,
                )
        self.moveArmAbsRgt = channel.unary_unary(
                '/Nxt/moveArmAbsRgt',
                request_serializer=nxtrobot__pb2.SendValue.SerializeToString,
                response_deserializer=nxtrobot__pb2.Status.FromString,
                )
        self.moveArmAbsLft = channel.unary_unary(
                '/Nxt/moveArmAbsLft',
                request_serializer=nxtrobot__pb2.SendValue.SerializeToString,
                response_deserializer=nxtrobot__pb2.Status.FromString,
                )


class NxtServicer(object):
    """Missing associated documentation comment in .proto file."""

    def checkEncoders(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def servoOn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def servoOff(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def goInitial(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def goOffPose(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getJointAngles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setJointAngles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def playPattern(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def closeHandToolLft(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def closeHandToolRgt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def openHandToolLft(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def openHandToolRgt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ejectHandToolLft(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ejectHandToolRgt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def attachHandToolLft(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def attachHandToolRgt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setHandAnglesDegRgt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setHandAnglesDegLft(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def moveArmRelRgt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def moveArmRelLft(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def moveArmAbsRgt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def moveArmAbsLft(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NxtServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'checkEncoders': grpc.unary_unary_rpc_method_handler(
                    servicer.checkEncoders,
                    request_deserializer=nxtrobot__pb2.Empty.FromString,
                    response_serializer=nxtrobot__pb2.Status.SerializeToString,
            ),
            'servoOn': grpc.unary_unary_rpc_method_handler(
                    servicer.servoOn,
                    request_deserializer=nxtrobot__pb2.Empty.FromString,
                    response_serializer=nxtrobot__pb2.Status.SerializeToString,
            ),
            'servoOff': grpc.unary_unary_rpc_method_handler(
                    servicer.servoOff,
                    request_deserializer=nxtrobot__pb2.Empty.FromString,
                    response_serializer=nxtrobot__pb2.Status.SerializeToString,
            ),
            'goInitial': grpc.unary_unary_rpc_method_handler(
                    servicer.goInitial,
                    request_deserializer=nxtrobot__pb2.Empty.FromString,
                    response_serializer=nxtrobot__pb2.Status.SerializeToString,
            ),
            'goOffPose': grpc.unary_unary_rpc_method_handler(
                    servicer.goOffPose,
                    request_deserializer=nxtrobot__pb2.Empty.FromString,
                    response_serializer=nxtrobot__pb2.Status.SerializeToString,
            ),
            'getJointAngles': grpc.unary_unary_rpc_method_handler(
                    servicer.getJointAngles,
                    request_deserializer=nxtrobot__pb2.Empty.FromString,
                    response_serializer=nxtrobot__pb2.ReturnValue.SerializeToString,
            ),
            'setJointAngles': grpc.unary_unary_rpc_method_handler(
                    servicer.setJointAngles,
                    request_deserializer=nxtrobot__pb2.SendValue.FromString,
                    response_serializer=nxtrobot__pb2.Status.SerializeToString,
            ),
            'playPattern': grpc.unary_unary_rpc_method_handler(
                    servicer.playPattern,
                    request_deserializer=nxtrobot__pb2.SendValue.FromString,
                    response_serializer=nxtrobot__pb2.Status.SerializeToString,
            ),
            'closeHandToolLft': grpc.unary_unary_rpc_method_handler(
                    servicer.closeHandToolLft,
                    request_deserializer=nxtrobot__pb2.Empty.FromString,
                    response_serializer=nxtrobot__pb2.Status.SerializeToString,
            ),
            'closeHandToolRgt': grpc.unary_unary_rpc_method_handler(
                    servicer.closeHandToolRgt,
                    request_deserializer=nxtrobot__pb2.Empty.FromString,
                    response_serializer=nxtrobot__pb2.Status.SerializeToString,
            ),
            'openHandToolLft': grpc.unary_unary_rpc_method_handler(
                    servicer.openHandToolLft,
                    request_deserializer=nxtrobot__pb2.Empty.FromString,
                    response_serializer=nxtrobot__pb2.Status.SerializeToString,
            ),
            'openHandToolRgt': grpc.unary_unary_rpc_method_handler(
                    servicer.openHandToolRgt,
                    request_deserializer=nxtrobot__pb2.Empty.FromString,
                    response_serializer=nxtrobot__pb2.Status.SerializeToString,
            ),
            'ejectHandToolLft': grpc.unary_unary_rpc_method_handler(
                    servicer.ejectHandToolLft,
                    request_deserializer=nxtrobot__pb2.Empty.FromString,
                    response_serializer=nxtrobot__pb2.Status.SerializeToString,
            ),
            'ejectHandToolRgt': grpc.unary_unary_rpc_method_handler(
                    servicer.ejectHandToolRgt,
                    request_deserializer=nxtrobot__pb2.Empty.FromString,
                    response_serializer=nxtrobot__pb2.Status.SerializeToString,
            ),
            'attachHandToolLft': grpc.unary_unary_rpc_method_handler(
                    servicer.attachHandToolLft,
                    request_deserializer=nxtrobot__pb2.Empty.FromString,
                    response_serializer=nxtrobot__pb2.Status.SerializeToString,
            ),
            'attachHandToolRgt': grpc.unary_unary_rpc_method_handler(
                    servicer.attachHandToolRgt,
                    request_deserializer=nxtrobot__pb2.Empty.FromString,
                    response_serializer=nxtrobot__pb2.Status.SerializeToString,
            ),
            'setHandAnglesDegRgt': grpc.unary_unary_rpc_method_handler(
                    servicer.setHandAnglesDegRgt,
                    request_deserializer=nxtrobot__pb2.SendValue.FromString,
                    response_serializer=nxtrobot__pb2.Status.SerializeToString,
            ),
            'setHandAnglesDegLft': grpc.unary_unary_rpc_method_handler(
                    servicer.setHandAnglesDegLft,
                    request_deserializer=nxtrobot__pb2.SendValue.FromString,
                    response_serializer=nxtrobot__pb2.Status.SerializeToString,
            ),
            'moveArmRelRgt': grpc.unary_unary_rpc_method_handler(
                    servicer.moveArmRelRgt,
                    request_deserializer=nxtrobot__pb2.SendValue.FromString,
                    response_serializer=nxtrobot__pb2.Status.SerializeToString,
            ),
            'moveArmRelLft': grpc.unary_unary_rpc_method_handler(
                    servicer.moveArmRelLft,
                    request_deserializer=nxtrobot__pb2.SendValue.FromString,
                    response_serializer=nxtrobot__pb2.Status.SerializeToString,
            ),
            'moveArmAbsRgt': grpc.unary_unary_rpc_method_handler(
                    servicer.moveArmAbsRgt,
                    request_deserializer=nxtrobot__pb2.SendValue.FromString,
                    response_serializer=nxtrobot__pb2.Status.SerializeToString,
            ),
            'moveArmAbsLft': grpc.unary_unary_rpc_method_handler(
                    servicer.moveArmAbsLft,
                    request_deserializer=nxtrobot__pb2.SendValue.FromString,
                    response_serializer=nxtrobot__pb2.Status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Nxt', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Nxt(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def checkEncoders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nxt/checkEncoders',
            nxtrobot__pb2.Empty.SerializeToString,
            nxtrobot__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def servoOn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nxt/servoOn',
            nxtrobot__pb2.Empty.SerializeToString,
            nxtrobot__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def servoOff(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nxt/servoOff',
            nxtrobot__pb2.Empty.SerializeToString,
            nxtrobot__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def goInitial(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nxt/goInitial',
            nxtrobot__pb2.Empty.SerializeToString,
            nxtrobot__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def goOffPose(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nxt/goOffPose',
            nxtrobot__pb2.Empty.SerializeToString,
            nxtrobot__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getJointAngles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nxt/getJointAngles',
            nxtrobot__pb2.Empty.SerializeToString,
            nxtrobot__pb2.ReturnValue.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setJointAngles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nxt/setJointAngles',
            nxtrobot__pb2.SendValue.SerializeToString,
            nxtrobot__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def playPattern(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nxt/playPattern',
            nxtrobot__pb2.SendValue.SerializeToString,
            nxtrobot__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def closeHandToolLft(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nxt/closeHandToolLft',
            nxtrobot__pb2.Empty.SerializeToString,
            nxtrobot__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def closeHandToolRgt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nxt/closeHandToolRgt',
            nxtrobot__pb2.Empty.SerializeToString,
            nxtrobot__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def openHandToolLft(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nxt/openHandToolLft',
            nxtrobot__pb2.Empty.SerializeToString,
            nxtrobot__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def openHandToolRgt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nxt/openHandToolRgt',
            nxtrobot__pb2.Empty.SerializeToString,
            nxtrobot__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ejectHandToolLft(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nxt/ejectHandToolLft',
            nxtrobot__pb2.Empty.SerializeToString,
            nxtrobot__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ejectHandToolRgt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nxt/ejectHandToolRgt',
            nxtrobot__pb2.Empty.SerializeToString,
            nxtrobot__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def attachHandToolLft(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nxt/attachHandToolLft',
            nxtrobot__pb2.Empty.SerializeToString,
            nxtrobot__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def attachHandToolRgt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nxt/attachHandToolRgt',
            nxtrobot__pb2.Empty.SerializeToString,
            nxtrobot__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setHandAnglesDegRgt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nxt/setHandAnglesDegRgt',
            nxtrobot__pb2.SendValue.SerializeToString,
            nxtrobot__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setHandAnglesDegLft(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nxt/setHandAnglesDegLft',
            nxtrobot__pb2.SendValue.SerializeToString,
            nxtrobot__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def moveArmRelRgt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nxt/moveArmRelRgt',
            nxtrobot__pb2.SendValue.SerializeToString,
            nxtrobot__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def moveArmRelLft(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nxt/moveArmRelLft',
            nxtrobot__pb2.SendValue.SerializeToString,
            nxtrobot__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def moveArmAbsRgt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nxt/moveArmAbsRgt',
            nxtrobot__pb2.SendValue.SerializeToString,
            nxtrobot__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def moveArmAbsLft(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Nxt/moveArmAbsLft',
            nxtrobot__pb2.SendValue.SerializeToString,
            nxtrobot__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
